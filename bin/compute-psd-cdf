#!/usr/bin/env python

"""compute the CDF for the value of a PSD at each frequency separately from a set of PSDs. This can be used to appoximate the full process representing the PSDs when assuming each frequency bin is independent (which is not the case). An example use case would be to find the "median PSD" from a large set.

WARNING: this script will load all PSDs into memory before computing the CDF (in order to set an appropriate range for each CDF) and therefore could be quite memory-intensive if given a large number of PSDs."""
__author__ = "Reed Essick (reed.essick@gmail.com)"

#-------------------------------------------------

import os

import numpy as np

from argparse import ArgumentParser

### non-standard libraries
from exposure import utils

#-------------------------------------------------

def compute_quantiles(quantiles, vals):
    """numpy.percentile may be slow, but I'm not sure how to speed it up. If I can, this function should make it easy to swap out...
    """
    return [np.percentile(vals, q*100) for q in quantiles]

#-------------------------------------------------

parser = ArgumentParser(description=__doc__)

parser.add_argument('psd', nargs='+', type=str)

parser.add_argument('-n', '--num-points', default=101, type=int,
    help='the number of points used to respresent the CDF at each frequency.')

parser.add_argument('-v', '--verbose', default=False, action='store_true')
parser.add_argument('-V', '--Verbose', default=False, action='store_true')

parser.add_argument('-o', '--output-dir', default='.', type=str)
parser.add_argument('-t', '--tag', default='', type=str)

args = parser.parse_args()

args.verbose |= args.Verbose

if not os.path.exists(args.output_dir):
    try:
        os.makedirs(args.output_dir)
    except OSError:
        pass ### race condition where someone else made the directory

if args.tag:
    args.tag = "_"+args.tag

#-------------------------------------------------

### load PSDs
if args.verbose:
    print('loading PSDs')
Npsd = len(args.psd)

### load in the first PSD
path = args.psd[0]
if args.Verbose:
    print('loading: '+path)
freqs, psd = utils.retrieve_psd(path)
Nfrq = len(freqs)

psds = np.empty((Npsd, Nfrq), dtype=float)
psds[0,:] = psd

for i, path in enumerate(args.psd[1:]):
    if args.Verbose:
        print('loading: '+path)

    f, psd = utils.retrieve_psd(path)
    assert np.all(f==freqs), 'frequency mismatch between %s and %s'%(args.psd[0], path)
    psds[i,:] = psd

### compute CDFs for each frequency separately
if args.verbose:
    print('computing CDFs and quantiles')
vals = np.empty((Nfrq, args.num_points), dtype=float)
cdfs = np.empty((Nfrq, args.num_points), dtype=float)

quantiles = np.linspace(0, 1, args.num_points)
for ind in range(Nfrq):
    vals[ind,:] = compute_quantiles(quantiles, psds[:,ind])
    cdfs[ind,:] = quantiles

### save the result in an hdf5 file
path = utils.psd_cdf_path(args.output_dir, args.tag)
if args.verbose:
    print('writing: '+path)
utils.report_psd_cdf(path, freqs, vals, cdfs, Npsd)
