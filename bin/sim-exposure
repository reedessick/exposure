#!/usr/bin/env python

__usage__ = "sim-exposure [--options] gps_start gps_stop"
__doc__ = """\
a simple script for generating simulated skymaps using quasi-realistic detectors.
NOTE:
    we ignore the relative sensitivity of detectors, which would affect the time-of-arrival via signal bandwidth and snr, etc. This should be corrected in the future."""
__author__ = "reed.essick@ligo.org"

#-------------------------------------------------

import os

import numpy as np
import healpy as hp

from optparse import OptionParser

### non-standard libraries
import simUtils
import detector_cache

#-------------------------------------------------

DEFAULT_COORD = 'C'
KNOWN_COORD = ['C', 'E']

#-------------------------------------------------

parser = OptionParser(usage=__usage__, description=__doc__)

parser.add_option('-v', '--verbose', default=False, action='store_true')

parser.add_option('-i', '--ifo', default=[], type='string', action='append',
    help='can be repeated')

parser.add_option('--coord', default=DEFAULT_COORD, type='string',
    help='either E or C. DEFAULT='+DEFAULT_COORD)
parser.add_option('--nside', default=simUtils.DEFAULT_NSIDE, type='int',
    help='DEFAULT=%d'%simUtils.DEFAULT_NSIDE)
parser.add_option('--C-uniform', default=False, action='store_true',
    help='analytically marginalize away any dependence on RA over \
time regardless of how long we actually specify the exposure. Only \
takes effect when specified with --coord=C')

parser.add_option('-o', '--output-dir', default='.', type='string')
parser.add_option('-t', '--tag', default='', type='string')

opts, args = parser.parse_args()
assert len(args)==2, 'please supply exactly 2 input arguments\n%s'%__usage__
gps_start, gps_stop = [int(_) for _ in args]
assert opts.coord in KNOWN_COORD, '--coord must be one of: '+','.join(KNOWN_COORD)

if not os.path.exists(opts.output_dir):
    os.makedirs(opts.output_dir)

if opts.tag:
    opts.tag = "_"+opts.tag

#-------------------------------------------------

### extract detectors
detectors = [detector_cache.detectors[ifo] for ifo in opts.ifo]

#-------------------------------------------------

if opts.verbose:
    print('simulating exposure within [%.6f, %.6f)'%(gps_start, gps_stop))
args = gps_start, gps_stop, detectors
kwargs = {
    'nside':opts.nside,
}
if (opts.coord=='E') or opts.C_uniform:
    head, exposure = simUtils.simulate_geo_exposure(*args, **kwargs)

    if (opts.coord=='C') and opts.C_uniform:
        if opts.verbose:
            print('analytically marginalizing over RA')
        theta, _ = hp.pix2ang(opts.nside, np.arange(hp.nside2npix(opts.nside)))
        truth = np.zeros_like(theta, dtype=bool)
        for t in sorted(set(theta)):
            truth[:] = theta==t 
            exposure[truth] = np.mean(exposure[truth])

else:
    head, exposure = simUtils.simulate_cel_exposure(*args, **kwargs)

path = "%s/sim-exposure%s-%d-%d.fits.gz"%(opts.output_dir, opts.tag, gps_start, gps_stop-gps_start)
if opts.verbose:
    print('saving: '+path)
header = [
    ('START_S', head['gps_start_sec']),
    ('START_NS', head['gps_start_nsec']),
    ('STOP_S', head['gps_stop_sec']),
    ('STOP_NS', head['gps_stop_nsec']),
    ('IFOS', ','.join(head['ifos'])),
]
hp.write_map(path, exposure, coord=opts.coord, extra_header=header)
