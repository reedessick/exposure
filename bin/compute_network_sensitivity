#!/usr/bin/env python

__usage__ = "compute_network_sensitivity [--options] gps gps gps ..."
__description__ = "compute the network sensitivity given ifo, range pairs"
__author__ = "Reed Essick (reed.essick@ligo.org)"

#-------------------------------------------------

import os
import gzip

import numpy as np
import healpy as hp

from optparse import OptionParser

### non-standard libraries
from exposure import
from exposure import simulation

from skymap_statitics import import detector_cache
from skymap_statitics import triangulate

#-------------------------------------------------

parser = OptionParser(usage=__usage__, description=__description__)

parser.add_option('-v', '--verbose', default=False, action='store_true')
parser.add_option('-V', '--Verbose', default=False, action='store_true')

parser.add_option('', '--ifo-horizon', nargs=2, default=[], type='string', action='append',
    help='specify which IFOs to include and paths to their range files as, e.g.: H1 path/to/horizon.txt.gz \
DEFAULT=[]')

parser.add_option('', '--nside', default=simulation.DEFAULT_NSIDE, type='int', 
    help='the NSIDE resolution for the resulting FITS files')

parser.add_option('-o', '--output-dir', default='.', type='string')
parser.add_option('-t', '--tag', default='', type='string')

opts, args = parser.parse_args()

for ifo, _ in opts.ifo_horizon:
    assert detector_cache.detectors.has_key(ifo), 'IFO=%s not understood'%ifo

args = [float(_) for _ in args] ### convert gps times to floats

if opts.tag:
    opts.tag = "_"+opts.tag

if not os.path.exists(opts.output_dir):
    os.makedirs(opts.output_dir)

opts.verbose |= opts.Verbose

#-------------------------------------------------

### read in horizons
horizons = []
for ifo, path in opts.ifo_horizon:
    if opts.verbose:
        print( '%s -> %s'%(ifo, path) )
    f = gzip.open(path, 'r')
    horizons.append( (detector_cache.detectors[ifo], float(f.readline().strip())) )
    f.close()

#------------------------

### iterate over gps times
npix = hp.nside2npix(opts.nside)
theta, ra = hp.pix2ang(opts.nside, np.arange(npix)) ### positions in Equatorial coordinates
psi = np.zeros_like(theta, dtype=float)

for gps in args:
    if opts.verbose:
        print( 'gps=%.3f'%gps )
    phi = triangulate.rotateRAC2E(ra, gps) ### find the corresponding positions in Geographic coordinates

    network = simulation.detectors2antenna(horizons, theta, phi, psi)

    path = utils.sensitivity_path(opts.output_dir, opts.tag, gps, gzip=False)
    if opts.verbose:
        print( "writing : "+path )
    hp.write_map(
        path, 
        network, 
        coord='C', 
        extra_header=[(ifo, int(round(horizon, 0))) for ifo, horizon in horizons] + [('gps', int(round(gps, 0)))],
    ) 

    gzpath = utils.sensitivity_path(opts.output_dir, opts.tag, gps, gzip=True)
    if opts.verbose:
        print( "gzipping : %s -> %s"%(path, gzpath) )
    f = open(path, 'r')
    gzf = gzip.open(gzpath, 'w')
    gzf.write(f.read())
    gzf.close()
    f.close()
    os.remove(path) ### get rid of the extra copy
