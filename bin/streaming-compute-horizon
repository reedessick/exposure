#!/usr/bin/env python
"""a simple executable to compute a detector's horizon that lives persistently
"""
__author__ = "Reed Essick <reed.essick@gmail.com>"

#-------------------------------------------------

import os

import logging
from logging.handlers import TimedRotatingFileHandler

import numpy as np

from argparse import ArgumentParser

### non-standard libraries
from exposure import utils
from exposure import datafind
from exposure import simulation
from skymap_statistics import detector_cache

#-------------------------------------------------

parser = ArgumentParser(description=__doc__)

parser.add_argument('-s', '--source', required=True, nargs=3, type=str,
    help='a source of PSDs. This can be repeated to specify multiple IFOs. eg, "--source IFO rootdir tag')

parser.add_argument('--flow', default=simulation.DEFAULT_FLOW, type=float,
    help='DEFAULT=%.3f'%simulation.DEFAULT_FLOW)
parser.add_argument('--fhigh', default=simulation.DEFAULT_FHIGH, type=float,
    help='DEFAULT=%.3f'%simulation.DEFAULT_FHIGH)

parser.add_argument('--snr-thr', default=simulation.DEFAULT_SNR_THRESHOLD, type=float,
    help='an arbitrary snr threshold defining what is detectable. Used to estimate the horizon')

parser.add_argument('--stride', default=datafind.DEFAULT_STRIDE, type=int,
    help='the stride over which PSDs are cacluated')
parser.add_argument('--delay', default=datafind.DEFAULT_DELAY, type=int,
    help='the amount we stay behind realtime within the persistent loop')
parser.add_argument('--max-latency', default=datafind.DEFAULT_MAX_LATENCY, type=float,
    help='the maximum latency tolerated before jumping to the current time within the loop')
parser.add_argument('--cadence', default=datafind.DEFAULT_CADENCE, type=float,
    help='the amount of time we wait between I/O queries to find frames')

parser.add_argument('--gpsstart', type=float, default=None)
parser.add_argument('--gpsstop', type=float, default=None)

parser.add_argument('-v', '--verbose', default=False, action='store_true')

parser.add_argument('-o', '--output-dir', default='.', type=str)
parser.add_argument('-t', '--tag', default='', type=str)

args = parser.parse_args()

if args.gpsstart is None:
    args.gpsstart = int(datafind.tconvert())

if args.gpsstop is None:
    args.gpsstop = np.infty

if args.tag:
    args.tag = "_"+args.tag

if not os.path.exists(args.output_dir):
    os.makedirs(args.output_dir)

#-------------------------------------------------

### set up logger
logdir = os.path.join(args.output_dir, 'log')
if not os.path.exists(logdir):
    os.makedirs(logdir)

logname = os.path.basename(__file__)+args.tag
logpath = os.path.join(logdir, logname+'.log')

logger = logging.getLogger(logname)
logger.setLevel(10)

handlers = [
    TimedRotatingFileHandler(logpath, when='D', utc=True)
]
if args.verbose:
    handlers.append( logging.StreamHandler() )

formatter = logging.Formatter('%(asctime)s | %(name)s : %(levelname)s : %(message)s')
for handler in handlers:
    handler.setFormatter(formatter)
    logger.addHandler(handler)

#-------------------------------------------------

### set up dummy objects
PSD = detector_cache.PSD([], []) ### set up dummy PSD
detector = detector_cache.Detector('dummy', [0,0,0], [1,0,0], [0,1,0], psd=psd)

#-------------------------------------------------

### set up logger templates
infotmp = 'processing data within [%d, %d).'

psdtmp = 'searching for PSD for %s with rootdir=%s, tag=%s'%(ifo, rootdir, tag) + ' within [%d, %d).'
updatetmp = 'updating PSD for %s from %s for data within [%d, %d).'

timeouttmp = 'latency exceeded maximum value (%.3f sec) while searching for PSD from %s!'%(args.max_latency, ifo) + ' Skipping data within [%d, %d).'

writetmp = 'writing horizon to %s for data within [%d, %d).'
latencytmp = 'latency=%.3f sec for data within [%d, %d).'

### enter persistent loop
logger.info('entering persistent loop')
current = (args.gpsstart // args.stride)*args.stride
while current < args.gpsstop:
    future = current + args.stride
    tup = (current, future)
    logger.info(infotmp%tup)

    ### search for PSDs for this stride
    # remove all detectors from the network, adding back in only those that are present
    for det in network._instr:
        network.remove(det)

    datafind.wait(future, delay=args.delay, logger=logger)

    psdpath = utils.psd_path(rootdir, tag, current, args.stride)
    logger.info(psdtmp%tup)
    if os.path.exists(psdpath):
        logger.info(updatetmp%tup)
        freqs, psd = utils.retrieve_psd(psdpath) ### read from disk

    else:
        while datafind.latency(current, delay=args.delay) < args.max_latency:
            if os.path.exists(psdpath):
                logger.info(updatetmp%tup)
                freqs, psd = utils.retrieve_psd(psdpath) ### read from disk
                break
            else:
                datafind.sleep(args.cadence)

        else:
            logger.warn(timeouttmp%tup)
            continue

    # Note: we can only get here if we have at least one active detector
    ### update PSD
    PSD.update(psd, freqs=freqs) ### this updates the shared reference within detector as well

    ### compute the horizon for this detector
    horizon = simulation.detector2horizon(detector, args.snr_thr, flow=args.flow, fhigh=args.fhigh)[0][1]

    ### write horizon
    path = utils.horizon_path(args.output_dir, args.tag, current, args.stride)
    thatdir = os.path.dirname(path)
    if not os.path.exists(thatdir):
        os.makedirs(thatdir)
    logger.info(writetmp%((path,)+tup))

    utils.report_horizon(path, horizon, args.flow, args.fhigh, psd_path)

    ### increment to the next stride
    logger.info(latencytmp%((datafind.latency(current, delay=args.delay),)+tup))
    current = future
