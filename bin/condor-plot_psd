#!/usr/bin/env python

__usage__ = "condor-plot_psd [--options] psd.txt.gz psd.txt.gz ..."
__description__ = "a very basic wrapper that schedules `plot_psd` jobs"
__author__ = "Reed Essick (reed.essick@ligo.org)"

#-------------------------------------------------

import os
import getpass ### for default accounting_group_user

from distutils.spawn import find_executable

from optparse import OptionParser

### non-standard libraries
from exposure import utils

#-------------------------------------------------

parser = OptionParser(usage=__usage__, description=__description__)

parser.add_option("-v", "--verbose", default=False, action="store_true")

parser.add_option('', '--f-min', default=8, type='float',
    help='DEFAULT=8')
parser.add_option('', '--f-max', default=2048, type='float',
    help='DEFAULT=2048')

parser.add_option('', '--y-min', default=1e-24, type='float',
    help='DEFAULT=1e-24')
parser.add_option('', '--y-max', default=1e-20, type='float',
    help='DEFAULT=1e-20')

parser.add_option('', '--figtype', default=[], type='string', action='append')

parser.add_option('', '--universe', default='vanilla', type='string',
    help='DEFAULT=vanilla')
parser.add_option('', '--exe', default='compute_psd', type='string',
    help='specify the explicit path to the executable. \
DEFAULT=compute_psd')

parser.add_option('', '--accounting-group', default='ligo.dev.o1.burst.explore.test', type='string',
    help='DEFAULT=ligo.dev.o1.burst.explore.test')
parser.add_option('', '--accounting-group-user', default=getpass.getuser(), type='string',
    help='DEFAULT='+getpass.getuser())

parser.add_option('', '--retry', default=0, type='int', 
    help='DEFAULT=0')

parser.add_option("-o", "--output-dir", default='.', type='string')
parser.add_option("-t", "--tag", default="", type='string')

parser.add_option('-s', '--condor-submit', default=False, action='store_true',
    help='submit the DAG to condor')

opts, args = parser.parse_args()

if opts.tag:
    filetag = "_"+opts.tag
else:
    filetag = ""

if not opts.figtype:
    opts.figtype.append( 'png' )

args.output_dir = os.path.abspath(args.output_dir)
if not os.path.exists(opts.output_dir):
    os.makedirs(opts.output_dir)

#-------------------------------------------------

### write sub file
subname = "%s/plot_psd%s.sub"%(opts.output_dir, opts.tag)
if opts.verbose:
    print( "writing : "+subname )
f = open(subname, 'w')
f.write(utils.plot_psd_sub%{\
    'universe' : opts.universe,
    'exe' : os.path.abspath(find_executable(opts.exe)),
    'accounting_group' : opts.accounting_group,
    'accounting_group_user' : opts.accounting_group_user,
    'outdir' : opts.output_dir,
    'tag' : "--tag "+opts.tag if opts.tag else '',
    'filetag' : filetag,
    'fmin' : opts.f_min,
    'fmax' : opts.f_max,
    'ymin' : opts.y_min,
    'ymax' : opts.y_max,
})
f.close()

### iterate over segments and define compute_psd jobs for each
dagname = subname.replace('.sub', '.dag')
if opts.verbose:
    print( "writing : "+dagname )
f = open(dagname, 'w')

for path in args:
    f.write(utils.plot_psd_dag%{\
        'sub' : subname,
        'jobid' : os.path.basename(path).strip('.txt.gz'), 
        'path' : path,
        'retry' : opts.retry,
    })

f.close()

#-------------------------------------------------

### submit
if opts.condor_submit:
    if opts.verbose:
        print( 'submitting : '+dagname )
    import subprocess as sp
    sp.Popen(['condor_submit_dag', dagname]).wait()

elif opts.verbose:
    print( 'you can now submit : '+dagname )
