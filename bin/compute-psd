#!/usr/bin/env python

__doc__ = "a very basic executable that computes a PSD estimate based on the time between [gpsstart, gpsstop]. NOTE: if the derived set of segments is not contiguous throughout [gpsstart, gpsstop], we raise an exception."
__author__ = "Reed Essick (reed.essick@ligo.org)"

#-------------------------------------------------

import os

from argparse import ArgumentParser

### non-standard libraries
from exposure import utils
from exposure import datafind
from exposure import dft

#-------------------------------------------------

parser = ArgumentParser(description=__doc__)

parser.add_argument('channel', type=str)
parser.add_argument('frametype', type=str)
parser.add_argument('gpsstart', type=int)
parser.add_argument('gpsstop', type=int)

parser.add_argument("-v", "--verbose", default=False, action="store_true")
parser.add_argument("-V", "--Verbose", default=False, action="store_true")

parser.add_argument("--include-flag", default=[], type=str, action='append',
    help='the flags used to select subsets of [gpsstart, gpsstop] for analysis. \
Can be repeated to take the intersection of multiple flags. \
DEFAULT=[] (analyze all time in [gpsstart, gpsstop]).')
parser.add_argument("--exclude-flag", default=[], type=str, action='append',
    help='the same as --include-flag, except we only retain times that are \
outside of these flags instead of inside them')

parser.add_argument("--seglen", default=dft.DEFAULT_SEGLEN, type=int,
    help='the length of segments used to estimate the PSD via an averaging procedure (specify in seconds). \
NOTE: if we do not obtain an integer number of segments based on --seglen, --overlap, gpsstart, and gpsstop, \
we will raise a ValueError. DEFAULT=%d'%dft.DEFAULT_SEGLEN)
parser.add_argument("--overlap", default=dft.DEFAULT_OVERLAP, type=float,
    help='the amount of time overlapped for segments used to estimate the PSD (specify in seconds). \
NOTE: if we do not obtain an integer number of segments based on --seglen, --overlap, gpsstart, and gpsstop, \
we will raise a ValueError. DEFAULT=%.3f'%dft.DEFAULT_OVERLAP)
parser.add_argument("--tukey-alpha", default=dft.DEFAULT_TUKEY_ALPHA, type=float,
    help='the Tukey "alpha" value used for windowing the DFT. \
DEFAULT=%.3f'%dft.DEFAULT_TUKEY_ALPHA)

parser.add_argument("-o", "--output-dir", default='.', type=str)
parser.add_argument("-t", "--tag", default="", type=str)

args = parser.parse_args()

stride = args.gpsstop - args.gpsstart

assert args.channel[0]==args.frametype[0], 'I do not believe you want a channel and frametype \
from different IFOs\n\tchannel : %s\n\tframetype : %s'%(args.channel, args.frametype)

assert args.seglen > args.overlap, '--seglen must be larger than --overlap'

if args.tag:
    args.tag = "_"+args.tag

args.output_dir = os.path.abspath(args.output_dir)
if not os.path.exists(args.output_dir):
    os.makedirs(args.output_dir)

args.verbose |= args.Verbose

#-------------------------------------------------

### ensure we have proper coverage
segments = [[args.gpsstart, args.gpsstop]]

segments = datafind.include_flags(segments, args.include_flag, args.gpsstart, stride, verbose=args.verbose)
segments = datafind.exclude_flags(segments, args.exclude_flag, args.gpsstart, stride, verbose=args.verbose)

assert segments, 'no remaining livetime after filtering by flags!'
assert len(segments)==1, 'more than one segment after filtering by flags!'
assert segments[0][0]==args.gpsstart and segments[0][1]==args.gpsstop, 'segments to not cover entire requested time period!'

#------------------------

### grab frames
frames = datafind.gw_data_find(args.channel[0], args.frametype, args.gpsstart, stride, verbose=args.verbose)

### insure we have full coverage
segs = utils.andsegments(segments, utils.mergesegments([(s,s+d) for _, s, d in frames]))

assert segs, 'no frame data found!'
assert len(segs)==1, 'gap in frame data found!'
assert segs[0][0]==args.gpsstart and segs[0][1]==args.gpsstop, 'frame data does not cover entire requested time period!'

#-------------------------------------------------

### read in data
if args.verbose:
    print( 'reading data' )
vect, dt = datafind.vec_from_frames(frames, args.channel, args.gpsstart, args.gpsstop, verbose=args.Verbose)

### compute PSD
n = 1 + 1.*(stride - args.seglen)/(args.seglen - args.overlap)
assert n%1==0, 'must be an integer number of segments used to compute PSD! Check your combination of gpsstart, gpsstop, --seglen, and --overlap'
n = int(n)

overlap = 1.*args.overlap/args.seglen ### the fractional overlap we want
if args.verbose:
    print( 'estimating PSD using %d segments with %.3f fractional overlap'%(n, overlap) )
psd, freqs = dft.estimate_psd(vect, num_segs=n, overlap=overlap, dt=dt, tukey_alpha=args.tukey_alpha)

### write PSD
path = utils.psd_path(args.output_dir, args.tag, args.gpsstart, stride)
directory = os.path.dirname(path)
if not os.path.exists(directory):
    os.makedirs(directory)
if args.verbose:
    print( "writing : "+path )
utils.report_psd(path, freqs, psd)
