#!/usr/bin/env python

__usage__ = "diurnal_hist [--options] gpsstart gpsstop"
__description__ = "compute a stacked histogram with a user-defined periodicity to estimate diurnal cycles"
__author__ = "Reed Essick (reed.essick@ligo.org)"

#-------------------------------------------------

import os
import gzip

import numpy as np

import matplotlib
matplotlib.use("Agg")
from matplotlib import pyplot as plt
plt.rcParams['text.usetex'] = True

from optparse import OptionParser

### non-standard libraries
from exposure import utils
from exposure import datafind

#-------------------------------------------------

parser = OptionParser(usage=__usage__, description=__description__)

parser.add_option('-v', '--verbose', default=False, action='store_true')

parser.add_option("", "--include-flag", default=[], type='string', action='append',
    help='the flags used to select subsets of [gpsstart, gpsstop] for analysis. \
Can be repeated to take the intersection of multiple flags. \
DEFAULT=[] (analyze all time in [gpsstart, gpsstop]).')
parser.add_option("", "--exclude-flag", default=[], type='string', action='append',
    help='the same as --include-flag, except we only retain times that are \
outside of these flags instead of inside them')

parser.add_option('', '--reference-gps', default=datafind.tconvert('Sep 12 2015 00:00:00'), type='float',
    help='DEFAULT=tconvert("Sep 12 2015 00:00:00 UTC"). Should be specified as a float.')

parser.add_option('', '--period', default=86400, type='float',
    help='the period (in seconds) with which we wrap the histogram for stacking purposes. \
DEFAULT=86400')

parser.add_option('-o', '--output-dir', default='.', type='string')
parser.add_option('-t', '--tag', default='', type='string')

parser.add_option("", '--figtype', default=[], type='string', action='append')

opts, args = parser.parse_args()
assert len(args)==2, 'please supply exactly 2 input arguments\n%s'%__usage__
gpsstart, gpsstop = [float(_) for _ in args]
stride = gpsstop - gpsstart

if opts.tag:
    opts.tag = "_"+opts.tag

if not os.path.exists(opts.output_dir):
    os.makedirs(opts.output_dir)

if not opts.figtype:
    opts.figtype.append( 'png' )

#-------------------------------------------------

### go find segment data
segments = [[gpsstart, gpsstop]]

segments = datafind.include_flags(segments, opts.include_flag, start, stride, verbose=opts.verbose)
segments = datafind.exclude_flags(segments, opts.exclude_flag, start, stride, verbose=opts.verbose)

assert segments, 'no remaining livetime after filtering by flags!'

#-------------------------------------------------

### wrap segments into the relevant range
if opts.verbose:
    print( 'wrapping segments' )
wrapped_segments = []
lvtm = 0.
for s, e in segments:
    lvtm += e-s ### count the total amount of live time

    ### convert to time releative to reference GPS
    s -= opts.reference_gps
    e -= opts.reference_gps

    ### in case s < opts.refrence_gps or s >= opts.reference_gps+opts.period
    ### map start time into the relevant range
    while s < 0:
        s += opts.period
        e += opts.period
    while s >= opts.period:
        s -= opts.period
        e -= opts.period

    while e > opts.period:
        wrapped_segments.append( [s, opts.period] )
        e -= opts.period ### subtract out the bins we've already taken into account
        s = 0 ### re-set the start back to the begining of the wrapped range
    wrapped_segments.append( [s, e] ) ### add in final bit

### compute counts
bins = np.linspace(0, opts.period, 1+int(10*(lvtm/opts.period)**0.5)) ### FIXME: could produce poor binning?
dt = bins[1]-bins[0]
counts = np.zeros(len(bins)-1, dtype=float)

if opts.verbose:
    print( 'computing histogram' )
for s, e in wrapped_segments:
    i = 0
    while s > bins[i]:
        i += 1

    if s < bins[i]: ### a possible hanging segment. FIXME: this logic could be cleaned up...
        if e <= bins[i]:
            counts[i-1] += e-s
            continue

        if e > bins[i]:
            counts[i-1] += bins[i]-s
            s = bins[i]

    while e > bins[i+1]: ### pick up the rest of the segment (start is now aligned with bins)
        counts[i] += dt
        i += 1
    counts[i] += e-bins[i]

path = "%s/diurnal_hist%s.txt.gz"%(opts.output_dir, opts.tag)
if opts.verbose:
    print( 'writing : '+path )
f = gzip.open(path, 'w')
print >> f, opts.period
print >> f, ' '.join('%.9f'%_ for _ in counts)
f.close()

### generate figure
if opts.verbose:
    print( 'plotting' )

fig = plt.figure()
ax = fig.gca()

counts /= lvtm

color = ax.step([bins[0]]+list(0.5*(bins[1:]+bins[:-1]))+[bins[-1]], [counts[0]]+list(counts)+[counts[-1]], where='mid')[0].get_color()
for s, e, c in zip(bins[:-1], bins[1:], counts):
    o = (c*(1-c)/(lvtm/dt))**0.5
    ax.fill_between([s,e], [c+o]*2, [c-o]*2, alpha=0.25, edgecolor='none')

ax.grid(True, which='both')

ax.set_xlabel('(t-%.3f)%s%.3f'%(opts.reference_gps, "\%", opts.period))
ax.set_ylabel('fraction of time')

ax.set_xlim(xmin=0, xmax=opts.period)

for figtype in opts.figtype:
    figname = "%s/diurnal_hist%s.%s"%(opts.output_dir, opts.tag, figtype)
    if opts.verbose:
        print( figname )
    fig.savefig(figname)
plt.close(fig)
