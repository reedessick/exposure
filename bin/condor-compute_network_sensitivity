#!/usr/bin/env python

__usage__ = "condor-compute_network_sensitivity [--options] ifoA pathA1,pathA2,... ifoB pathB1,pathB2,... ..."
__description__ = "massive parallelization of compute_network_sensitivity. We perform the matching association to figure out what IFOs are available when based on the path names"
__author__ = "Reed Essick (reed.essick@ligo.org)"

#-------------------------------------------------

import os

import getpass

from collections import defaultdict

import exposureUtils as utils

from optparse import OptionParser

#-------------------------------------------------

parser = OptionParser(usage=__usage__, description=__description__)

parser.add_option("-v", "--verbose", default=False, action="store_true")

parser.add_option('', '--nside', default=512, type='int',
    help='the NSIDE resolution for the resulting FITS files')

parser.add_option('', '--universe', default='vanilla', type='string',
    help='DEFAULT=vanilla')
parser.add_option('', '--exe', default='compute_psd', type='string',
    help='specify the explicit path to the executable. \
DEFAULT=compute_psd')

parser.add_option('', '--accounting-group', default='ligo.dev.o1.burst.explore.test', type='string',
    help='DEFAULT=ligo.dev.o1.burst.explore.test')
parser.add_option('', '--accounting-group-user', default=getpass.getuser(), type='string',
    help='DEFAULT='+getpass.getuser())

parser.add_option('', '--retry', default=0, type='int',
    help='DEFAULT=0')

parser.add_option("-o", "--output-dir", default='.', type='string')
parser.add_option("-t", "--tag", default="", type='string')

parser.add_option('-s', '--condor-submit', default=False, action='store_true',
    help='submit the DAG to condor')

opts, args = parser.parse_args()

assert len(args)%2==0, 'please supply an evan number of input arguments\n%s'%__usage__

if opts.tag:
    filetag = "_"+opts.tag
else:
    filetag = ""

if not os.path.exists(opts.output_dir):
    os.makedirs(opts.output_dir)

#--------------------------------------------------

### set up associations with which IFOs are available when
if opts.verbose:
    print( "sorting IFO horizon estiamtes by gps ranges" )
gpstimes = defaultdict( dict )
i = 0
while i < len(args):
    ifo = args[i]
    for path in args[i+1]:
        gpstimes[utils.extract_start_dur(path, suffix='.txt.gz')].update( (ifo, path) )        
    i += 2

#--------------------------------------------------

### write sub file
subname = "%s/compute_network_sensitivity%s.sub"%(opts.output_dir, filetag)
if opts.verbose:
    print( "writing : "+subname )
f = open(subname, 'w')
f.write(utils.compute_network_sensitivity_sub%{\
    'universe' : opts.universe,
    'exe' : opts.exe,
    'accounting_group' : opts.accounting_group,
    'accounting_group_user' : opts.accounting_group_user,
    'nside' : opts.nside,
    'filetag' : filetag,
})
f.close()

### iterate over segments and define compute_psd jobs for each
dagname = subname.replace('.sub', '.dag')
if opts.verbose:
    print( "writing : "+dagname )
f = open(dagname, 'w')

for (start, dur), ifos in gpstimes.items():
    f.write(utils.compute_network_sensitivity_dag%{\
        'jobid' : '%d'%start,
        'sub' : subname,
        'gps' : start + 0.5*dur, ### take the center of the window, which should be good enough...
        'tag' : opts.tag+'-%d-%d'%(start, dur),
        'ifo_horizons' : '--ifo-horizon '+' --ifo-horizon '.join('%s %s'%tuple(pair) for pair in ifos.items()),
        'retry' : opts.retry,
        'outdir' : opts.output_dir,
    })
f.close()

#-------------------------------------------------

### submit
if opts.condor_submit:
    if opts.verbose:
        print( 'submitting : '+dagname )
    import subprocess as sp
    sp.Popen(['condor_submit_dag', dagname]).wait()

elif opts.verbose:
    print( 'you can now submit : '+dagname )
