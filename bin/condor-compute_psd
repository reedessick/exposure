#!/usr/bin/env python

__usage__ = "condor-compute_psd [--options] channel frametype gpsstart gpsstop"
__description__ = "a very basic wrapper that schedules `compute_psd` jobs. The resulting DAG should run to completion if everything worked correctly (i.e. nodes should not raise exceptions"
__author__ = "Reed Essick (reed.essick@ligo.org)"

#-------------------------------------------------

import os
import getpass ### for default accounting_group_user
import subprocess as sp

from optparse import OptionParser

### non-standard libraries
from exposure import utils
from exposure import datafind

#-------------------------------------------------

parser = OptionParser(usage=__usage__, description=__description__)

parser.add_option("-v", "--verbose", default=False, action="store_true")
parser.add_option("-V", "--Verbose", default=False, action="store_true")

parser.add_option("", "--include-flag", default=[], type='string', action='append',
    help='the flags used to select subsets of [gpsstart, gpsstop] for analysis. \
Can be repeated to take the intersection of multiple flags. \
DEFAULT=[] (analyze all time in [gpsstart, gpsstop]).')
parser.add_option("", "--exclude-flag", default=[], type='string', action='append',
    help='the same as --include-flag, except we only retain times that are \
outside of these flags instead of inside them')

parser.add_option("", "--win", default=60, type="int",
    help="estimate PSDs separately in sequential windows of this duration. \
DEFAULT=60")

parser.add_option("", "--seglen", default=4, type='int',
    help='the length of segments used to estimate the PSD via an averaging procedure (specify in seconds). \
NOTE: if we do not obtain an integer number of segments based on --seglen, --overlap, gpsstart, and gpsstop, \
we will raise a ValueError. DEFAULT=4')
parser.add_option("", "--overlap", default=2, type='float',
    help='the amount of time overlapped for segments used to estimate the PSD (specify in seconds). \
NOTE: if we do not obtain an integer number of segments based on --seglen, --overlap, gpsstart, and gpsstop, \
we will raise a ValueError. DEFAULT=2')
parser.add_option("", "--tukey-alpha", default=0.50, type='float',
    help='the Tukey "alpha" value used for windowing the DFT. \
DEFAULT=0.50')

parser.add_option('', '--universe', default='vanilla', type='string',
    help='DEFAULT=vanilla')
parser.add_option('', '--exe', default='compute_psd', type='string',
    help='specify the explicit path to the executable. \
DEFAULT=compute_psd')

parser.add_option('', '--accounting-group', default='ligo.dev.o1.burst.explore.test', type='string',
    help='DEFAULT=ligo.dev.o1.burst.explore.test')
parser.add_option('', '--accounting-group-user', default=getpass.getuser(), type='string',
    help='DEFAULT='+getpass.getuser())

parser.add_option('', '--retry', default=0, type='int', 
    help='DEFAULT=0')

parser.add_option("-o", "--output-dir", default='.', type='string')
parser.add_option("-t", "--tag", default="", type='string')

parser.add_option('-s', '--condor-submit', default=False, action='store_true',
    help='submit the DAG to condor')

opts, args = parser.parse_args()

assert len(args)==4, 'please supply exactly 4 arguments\n%s'%__usage__
channel, frametype = args[:2]
gpsstart, gpsstop = [int(_) for _ in args[2:]]
stride = gpsstop - gpsstart

assert channel[0]==frametype[0], 'I do not believe you want a channel and frametype \
from different IFOs\n\tchannel : %s\n\tframetype : %s\n%s'%(channel, frametype, __usage__)

assert opts.seglen > opts.overlap, '--seglen must be larger than --overlap\n\%s'%__usage__

if opts.tag:
    filetag = "_"+opts.tag
else:
    filetag = ""

if not os.path.exists(opts.output_dir):
    os.makedirs(opts.output_dir)

opts.verbose |= opts.Verbose

#-------------------------------------------------

### query segments to define individual runs
### ensure we have proper coverage
segments = [[gpsstart, gpsstop]]

segments = datafind.include_flags(segments, opts.include_flag, start, stride, verbose=opts.verbose)
segments = datafind.exclude_flags(segments, opts.exclude_flag, start, stride, verbose=opts.verbose)

### check to make sure we have livetime left, etc
assert len(segments), 'no remaining livetime after filtering by flags!'
lvtm = sum([e-s for e, e in segments]) ### amount of time requested within segments

#------------------------

### write sub file
subname = "%s/compute_psd%s.sub"%(opts.output_dir, filetag)
if opts.verbose:
    print( "writing : "+subname )
f = open(subname, 'w')
f.write(utils.compute_psd_sub%{\
    'universe' : opts.universe,
    'exe' : opts.exe,
    'channel' : channel,
    'frametype' : frametype,
    'accounting_group' : opts.accounting_group,
    'accounting_group_user' : opts.accounting_group_user,
    'tag' :  "--tag "+opts.tag if opts.tag else '',
    'filetag' : filetag,
    'start' : gpsstart,
    'dur' : gpsstop-gpsstart,
    'seglen' : opts.seglen,
    'overlap' : opts.overlap,
    'tukey_alpha' : opts.tukey_alpha,
})
f.close()

### iterate over segments and define compute_psd jobs for each
dagname = subname.replace('.sub', '.dag')
if opts.verbose:
    print( "writing : "+dagname )
f = open(dagname, 'w')

covered = 0 ### amount of time that's covered by a PSD estimate
for segstart, segstop in segments:
    segdur = segstop - segstart
    if opts.verbose:
        print( "scheduling jobs for %d -- %d"%(segstart, segstop) )
    
    s = (segstart/opts.win)*opts.win ### line-up start with integer number of windows. Needed to guarantee files will line up later -> integer division!
    if s < segstart: ### mostly likely case, but we need to check just in case
        s += opts.win 

    while s+opts.win < segstop:
        f.write(utils.compute_psd_dag%{\
            'jobid' : '%d'%gpsstart,
            'sub' : subname,
            'gpsstart' : s, 
            'gpsstop' : s+opts.win,
            'retry' : opts.retry,
            'outdir' : opts.output_dir,
        })
        s += opts.win
        covered += opts.win

f.close()

#-------------------------------------------------

if opts.Verbose: ### report amount of time covered
    print( 'requested       : %d sec'%(gpsstop-gpsstart) )
    print( 'within segments : %d sec'%lvtm )
    print( 'covered by PSD  : %d sec'%covered )

### submit
if opts.condor_submit:
    if opts.verbose:
        print( 'submitting : '+dagname )
    import subprocess as sp
    sp.Popen(['condor_submit_dag', dagname]).wait()

elif opts.verbose:
    print( 'you can now submit : '+dagname )
