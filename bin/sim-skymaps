#!/usr/bin/env python

__usage__ = "sim-skymaps [--options] gps_start gps_stop"
__doc__ = """\
a simple script for generating simulated skymaps using quasi-realistic detectors.
NOTE:
    we ignore the relative sensitivity of detectors, which would affect the time-of-arrival via signal bandwidth and snr, etc. This should be corrected in the future."""
__author__ = "reed.essick@ligo.org"

#-------------------------------------------------

import os

import healpy as hp

from optparse import OptionParser

### non-standard libraries
import simulation
import detector_cache

#-------------------------------------------------

DEFAULT_COORD = 'C'
KNOWN_COORD = ['C', 'E']

#-------------------------------------------------

parser = OptionParser(usage=__usage__, description=__doc__)

parser.add_option('-v', '--verbose', default=False, action='store_true')
parser.add_option('-V', '--Verbose', default=False, action='store_true')

parser.add_option('-i', '--ifo', default=[], type='string', action='append',
    help='can be repeated')
parser.add_option('-n', '--num-events', default=simulation.DEFAULT_SIZE, type='int',
    help='DEFAULT=%d'%simulation.DEFAULT_SIZE)

parser.add_option('--coord', default=DEFAULT_COORD, type='string',
    help='either E or C. DEFAULT='+DEFAULT_COORD)
parser.add_option('--time-error', default=simulation.DEFAULT_TIME_ERROR, type='float',
    help='standard deviation for a Gaussian for time-of-arrival error specified in seconds. \
DEFAULT=%.3e'%simulation.DEFAULT_TIME_ERROR)
parser.add_option('--nside', default=simulation.DEFAULT_NSIDE, type='int',
    help='DEFAULT=%d'%simulation.DEFAULT_NSIDE)

parser.add_option('-o', '--output-dir', default='.', type='string')
parser.add_option('-t', '--tag', default='', type='string')

opts, args = parser.parse_args()
assert len(args)==2, 'please supply exactly 2 input arguments\n%s'%__usage__
gps_start, gps_stop = [float(_) for _ in args]
assert opts.coord in KNOWN_COORD, '--coord must be one of: '+','.join(KNOWN_COORD)

if not os.path.exists(opts.output_dir):
    os.makedirs(opts.output_dir)

if opts.tag:
    opts.tag = "_"+opts.tag

opts.verbose |= opts.Verbose

#-------------------------------------------------

### extract detectors
detectors = [detector_cache.detectors[ifo] for ifo in opts.ifo]

#-------------------------------------------------

if opts.verbose:
    print('drawing %d events within [%.6f, %.6f)'%(opts.num_events, gps_start, gps_stop))
template = os.path.join(opts.output_dir, 'sim-skymap-%s%s'%(opts.coord, opts.tag)+'-%dd%09d.fits.gz')
args = gps_start, gps_stop, detectors
kwargs = {
    'size':opts.num_events,
    'nside':opts.nside,
    'time_error':opts.time_error,
}
skymaps = simulation.simulate_cel_skymaps(*args, **kwargs) if opts.coord=='C' \
    else simulation.simulate_geo_skymaps(*args, **kwargs)
for head, skymap in skymaps:
    path = template%(head['gps_sec'], head['gps_nsec'])
    if opts.Verbose:
        print('    saving: '+path)
    header = [
        ('GPS_SEC', head['gps_sec']),
        ('GPS_NSEC', head['gps_nsec']),
        ('THETA', head['theta']),
        ('PHI', head['phi']),
        ('DEC', head['dec']),
        ('RA', head['ra']),
        ('IFOS', ','.join(head['ifos'])),
    ]
    hp.write_map(path, skymap, coord=opts.coord, extra_header=header)
