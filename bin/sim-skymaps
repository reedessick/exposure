#!/usr/bin/env python

__usage__ = "sim-skymaps [--options] gps_start gps_stop"
__doc__ = "a simple script for generating simulated skymaps using quasi-realistic detectors"
__author__ = "reed.essick@ligo.org"

#-------------------------------------------------

import os

from optparse import OptionParser

### non-standard libraries
import simUtils
import detector_cache

#-------------------------------------------------

parser = OptionParser(usage=__usage__, description=__doc__)

parser.add_option('-v', '--verbose', default=False, action='store_true')

parser.add_option('-i', '--ifo', default=[], type='string', action='append',
    help='can be repeated')
parser.add_option('-n', '--num-events', default=simUtils.DEFAULT_SIZE, type='int',
    help='DEFAULT=%d'%simUtils.DEFAULT_SIZE)

parser.add_option('--nside', default=simUtils.DEFAULT_NSIDE, type='int',
    help='DEFAULT=%d'%simUtils.DEFAULT_NSIDE)

parser.add_option('-o', '--output-dir', default='.', type='string')
parser.add_option('-t', '--tag', default='', type='string')

opts, args = parser.parse_args()
assert len(args)==2, 'please supply exactly 2 input arguments\n%s'%__usage__
gps_start, gps_stop = [float(_) for _ in args]

if not os.path.exists(opts.output_dir):
    os.makedirs(opts.output_dir)

if opts.tag:
    opts.tag = "_"+opts.tag

detectors = [detector_cache.detectors[ifo] for ifo in opts.ifo]
ifos = ','.join(opts.ifo) ### used for FITS headers

#-------------------------------------------------

if opts.verbose:
    print('drawing %d events within [%.6f, %.6f)'%(opts.num_events, start, stop))
for time, skymap in simUtils.sim_skymaps(gps_start, gps_stop, detectors, size=opts.num, nside=opts.nside):
    sec = int(time)
    ns = (time-sec)*1e9
    path = "%s/simskymap%s-%dd%09d.fits"
    if opts.verbose:
        print('    saving: '+path)
    hp.write_map(path, skymap, coord='C', extra_header=[('GPS', time), ('IFOS', ifos)])
